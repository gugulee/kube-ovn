// Code generated by MockGen. DO NOT EDIT.
// Source: ../pkg/ovs/interface.go

// Package ovs is a generated GoMock package.
package ovs

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ovs "github.com/kubeovn/kube-ovn/pkg/ovs"
	ovnnb "github.com/kubeovn/kube-ovn/pkg/ovsdb/ovnnb"
	ovsdb "github.com/ovn-org/libovsdb/ovsdb"
)

// MockNbGlobal is a mock of NbGlobal interface.
type MockNbGlobal struct {
	ctrl     *gomock.Controller
	recorder *MockNbGlobalMockRecorder
}

// MockNbGlobalMockRecorder is the mock recorder for MockNbGlobal.
type MockNbGlobalMockRecorder struct {
	mock *MockNbGlobal
}

// NewMockNbGlobal creates a new mock instance.
func NewMockNbGlobal(ctrl *gomock.Controller) *MockNbGlobal {
	mock := &MockNbGlobal{ctrl: ctrl}
	mock.recorder = &MockNbGlobalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNbGlobal) EXPECT() *MockNbGlobalMockRecorder {
	return m.recorder
}

// GetNbGlobal mocks base method.
func (m *MockNbGlobal) GetNbGlobal() (*ovnnb.NBGlobal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNbGlobal")
	ret0, _ := ret[0].(*ovnnb.NBGlobal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNbGlobal indicates an expected call of GetNbGlobal.
func (mr *MockNbGlobalMockRecorder) GetNbGlobal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNbGlobal", reflect.TypeOf((*MockNbGlobal)(nil).GetNbGlobal))
}

// SetAzName mocks base method.
func (m *MockNbGlobal) SetAzName(azName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAzName", azName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAzName indicates an expected call of SetAzName.
func (mr *MockNbGlobalMockRecorder) SetAzName(azName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAzName", reflect.TypeOf((*MockNbGlobal)(nil).SetAzName), azName)
}

// SetICAutoRoute mocks base method.
func (m *MockNbGlobal) SetICAutoRoute(enable bool, blackList []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetICAutoRoute", enable, blackList)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetICAutoRoute indicates an expected call of SetICAutoRoute.
func (mr *MockNbGlobalMockRecorder) SetICAutoRoute(enable, blackList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetICAutoRoute", reflect.TypeOf((*MockNbGlobal)(nil).SetICAutoRoute), enable, blackList)
}

// SetLBCIDR mocks base method.
func (m *MockNbGlobal) SetLBCIDR(serviceCIDR string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLBCIDR", serviceCIDR)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLBCIDR indicates an expected call of SetLBCIDR.
func (mr *MockNbGlobalMockRecorder) SetLBCIDR(serviceCIDR interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLBCIDR", reflect.TypeOf((*MockNbGlobal)(nil).SetLBCIDR), serviceCIDR)
}

// SetUseCtInvMatch mocks base method.
func (m *MockNbGlobal) SetUseCtInvMatch() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUseCtInvMatch")
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUseCtInvMatch indicates an expected call of SetUseCtInvMatch.
func (mr *MockNbGlobalMockRecorder) SetUseCtInvMatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUseCtInvMatch", reflect.TypeOf((*MockNbGlobal)(nil).SetUseCtInvMatch))
}

// UpdateNbGlobal mocks base method.
func (m *MockNbGlobal) UpdateNbGlobal(nbGlobal *ovnnb.NBGlobal, fields ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{nbGlobal}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNbGlobal", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNbGlobal indicates an expected call of UpdateNbGlobal.
func (mr *MockNbGlobalMockRecorder) UpdateNbGlobal(nbGlobal interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{nbGlobal}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNbGlobal", reflect.TypeOf((*MockNbGlobal)(nil).UpdateNbGlobal), varargs...)
}

// MockLogicalRouter is a mock of LogicalRouter interface.
type MockLogicalRouter struct {
	ctrl     *gomock.Controller
	recorder *MockLogicalRouterMockRecorder
}

// MockLogicalRouterMockRecorder is the mock recorder for MockLogicalRouter.
type MockLogicalRouterMockRecorder struct {
	mock *MockLogicalRouter
}

// NewMockLogicalRouter creates a new mock instance.
func NewMockLogicalRouter(ctrl *gomock.Controller) *MockLogicalRouter {
	mock := &MockLogicalRouter{ctrl: ctrl}
	mock.recorder = &MockLogicalRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogicalRouter) EXPECT() *MockLogicalRouterMockRecorder {
	return m.recorder
}

// CreateLogicalRouter mocks base method.
func (m *MockLogicalRouter) CreateLogicalRouter(lrName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLogicalRouter", lrName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLogicalRouter indicates an expected call of CreateLogicalRouter.
func (mr *MockLogicalRouterMockRecorder) CreateLogicalRouter(lrName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLogicalRouter", reflect.TypeOf((*MockLogicalRouter)(nil).CreateLogicalRouter), lrName)
}

// DeleteLogicalRouter mocks base method.
func (m *MockLogicalRouter) DeleteLogicalRouter(lrName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLogicalRouter", lrName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLogicalRouter indicates an expected call of DeleteLogicalRouter.
func (mr *MockLogicalRouterMockRecorder) DeleteLogicalRouter(lrName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLogicalRouter", reflect.TypeOf((*MockLogicalRouter)(nil).DeleteLogicalRouter), lrName)
}

// GetLogicalRouter mocks base method.
func (m *MockLogicalRouter) GetLogicalRouter(lrName string, ignoreNotFound bool) (*ovnnb.LogicalRouter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogicalRouter", lrName, ignoreNotFound)
	ret0, _ := ret[0].(*ovnnb.LogicalRouter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogicalRouter indicates an expected call of GetLogicalRouter.
func (mr *MockLogicalRouterMockRecorder) GetLogicalRouter(lrName, ignoreNotFound interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogicalRouter", reflect.TypeOf((*MockLogicalRouter)(nil).GetLogicalRouter), lrName, ignoreNotFound)
}

// ListLogicalRouter mocks base method.
func (m *MockLogicalRouter) ListLogicalRouter(needVendorFilter bool) ([]ovnnb.LogicalRouter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLogicalRouter", needVendorFilter)
	ret0, _ := ret[0].([]ovnnb.LogicalRouter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLogicalRouter indicates an expected call of ListLogicalRouter.
func (mr *MockLogicalRouterMockRecorder) ListLogicalRouter(needVendorFilter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogicalRouter", reflect.TypeOf((*MockLogicalRouter)(nil).ListLogicalRouter), needVendorFilter)
}

// LogicalRouterExists mocks base method.
func (m *MockLogicalRouter) LogicalRouterExists(name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogicalRouterExists", name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogicalRouterExists indicates an expected call of LogicalRouterExists.
func (mr *MockLogicalRouterMockRecorder) LogicalRouterExists(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogicalRouterExists", reflect.TypeOf((*MockLogicalRouter)(nil).LogicalRouterExists), name)
}

// MockLogicalRouterPort is a mock of LogicalRouterPort interface.
type MockLogicalRouterPort struct {
	ctrl     *gomock.Controller
	recorder *MockLogicalRouterPortMockRecorder
}

// MockLogicalRouterPortMockRecorder is the mock recorder for MockLogicalRouterPort.
type MockLogicalRouterPortMockRecorder struct {
	mock *MockLogicalRouterPort
}

// NewMockLogicalRouterPort creates a new mock instance.
func NewMockLogicalRouterPort(ctrl *gomock.Controller) *MockLogicalRouterPort {
	mock := &MockLogicalRouterPort{ctrl: ctrl}
	mock.recorder = &MockLogicalRouterPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogicalRouterPort) EXPECT() *MockLogicalRouterPortMockRecorder {
	return m.recorder
}

// CreatePeerRouterPort mocks base method.
func (m *MockLogicalRouterPort) CreatePeerRouterPort(localRouter, remoteRouter, localRouterPortIP string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePeerRouterPort", localRouter, remoteRouter, localRouterPortIP)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePeerRouterPort indicates an expected call of CreatePeerRouterPort.
func (mr *MockLogicalRouterPortMockRecorder) CreatePeerRouterPort(localRouter, remoteRouter, localRouterPortIP interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePeerRouterPort", reflect.TypeOf((*MockLogicalRouterPort)(nil).CreatePeerRouterPort), localRouter, remoteRouter, localRouterPortIP)
}

// DeleteLogicalRouterPort mocks base method.
func (m *MockLogicalRouterPort) DeleteLogicalRouterPort(lrpName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLogicalRouterPort", lrpName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLogicalRouterPort indicates an expected call of DeleteLogicalRouterPort.
func (mr *MockLogicalRouterPortMockRecorder) DeleteLogicalRouterPort(lrpName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLogicalRouterPort", reflect.TypeOf((*MockLogicalRouterPort)(nil).DeleteLogicalRouterPort), lrpName)
}

// DeleteLogicalRouterPorts mocks base method.
func (m *MockLogicalRouterPort) DeleteLogicalRouterPorts(externalIDs map[string]string, filter func(*ovnnb.LogicalRouterPort) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLogicalRouterPorts", externalIDs, filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLogicalRouterPorts indicates an expected call of DeleteLogicalRouterPorts.
func (mr *MockLogicalRouterPortMockRecorder) DeleteLogicalRouterPorts(externalIDs, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLogicalRouterPorts", reflect.TypeOf((*MockLogicalRouterPort)(nil).DeleteLogicalRouterPorts), externalIDs, filter)
}

// GetLogicalRouterPort mocks base method.
func (m *MockLogicalRouterPort) GetLogicalRouterPort(lrpName string, ignoreNotFound bool) (*ovnnb.LogicalRouterPort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogicalRouterPort", lrpName, ignoreNotFound)
	ret0, _ := ret[0].(*ovnnb.LogicalRouterPort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogicalRouterPort indicates an expected call of GetLogicalRouterPort.
func (mr *MockLogicalRouterPortMockRecorder) GetLogicalRouterPort(lrpName, ignoreNotFound interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogicalRouterPort", reflect.TypeOf((*MockLogicalRouterPort)(nil).GetLogicalRouterPort), lrpName, ignoreNotFound)
}

// ListLogicalRouterPorts mocks base method.
func (m *MockLogicalRouterPort) ListLogicalRouterPorts(externalIDs map[string]string, filter func(*ovnnb.LogicalRouterPort) bool) ([]ovnnb.LogicalRouterPort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLogicalRouterPorts", externalIDs, filter)
	ret0, _ := ret[0].([]ovnnb.LogicalRouterPort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLogicalRouterPorts indicates an expected call of ListLogicalRouterPorts.
func (mr *MockLogicalRouterPortMockRecorder) ListLogicalRouterPorts(externalIDs, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogicalRouterPorts", reflect.TypeOf((*MockLogicalRouterPort)(nil).ListLogicalRouterPorts), externalIDs, filter)
}

// LogicalRouterPortExists mocks base method.
func (m *MockLogicalRouterPort) LogicalRouterPortExists(lrpName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogicalRouterPortExists", lrpName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogicalRouterPortExists indicates an expected call of LogicalRouterPortExists.
func (mr *MockLogicalRouterPortMockRecorder) LogicalRouterPortExists(lrpName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogicalRouterPortExists", reflect.TypeOf((*MockLogicalRouterPort)(nil).LogicalRouterPortExists), lrpName)
}

// MockLogicalSwitch is a mock of LogicalSwitch interface.
type MockLogicalSwitch struct {
	ctrl     *gomock.Controller
	recorder *MockLogicalSwitchMockRecorder
}

// MockLogicalSwitchMockRecorder is the mock recorder for MockLogicalSwitch.
type MockLogicalSwitchMockRecorder struct {
	mock *MockLogicalSwitch
}

// NewMockLogicalSwitch creates a new mock instance.
func NewMockLogicalSwitch(ctrl *gomock.Controller) *MockLogicalSwitch {
	mock := &MockLogicalSwitch{ctrl: ctrl}
	mock.recorder = &MockLogicalSwitchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogicalSwitch) EXPECT() *MockLogicalSwitchMockRecorder {
	return m.recorder
}

// CreateBareLogicalSwitch mocks base method.
func (m *MockLogicalSwitch) CreateBareLogicalSwitch(lsName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBareLogicalSwitch", lsName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBareLogicalSwitch indicates an expected call of CreateBareLogicalSwitch.
func (mr *MockLogicalSwitchMockRecorder) CreateBareLogicalSwitch(lsName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBareLogicalSwitch", reflect.TypeOf((*MockLogicalSwitch)(nil).CreateBareLogicalSwitch), lsName)
}

// CreateLogicalSwitch mocks base method.
func (m *MockLogicalSwitch) CreateLogicalSwitch(lsName, lrName, cidrBlock, gateway string, needRouter bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLogicalSwitch", lsName, lrName, cidrBlock, gateway, needRouter)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLogicalSwitch indicates an expected call of CreateLogicalSwitch.
func (mr *MockLogicalSwitchMockRecorder) CreateLogicalSwitch(lsName, lrName, cidrBlock, gateway, needRouter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLogicalSwitch", reflect.TypeOf((*MockLogicalSwitch)(nil).CreateLogicalSwitch), lsName, lrName, cidrBlock, gateway, needRouter)
}

// DeleteLogicalSwitch mocks base method.
func (m *MockLogicalSwitch) DeleteLogicalSwitch(lsName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLogicalSwitch", lsName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLogicalSwitch indicates an expected call of DeleteLogicalSwitch.
func (mr *MockLogicalSwitchMockRecorder) DeleteLogicalSwitch(lsName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLogicalSwitch", reflect.TypeOf((*MockLogicalSwitch)(nil).DeleteLogicalSwitch), lsName)
}

// ListLogicalSwitch mocks base method.
func (m *MockLogicalSwitch) ListLogicalSwitch(needVendorFilter bool) ([]ovnnb.LogicalSwitch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLogicalSwitch", needVendorFilter)
	ret0, _ := ret[0].([]ovnnb.LogicalSwitch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLogicalSwitch indicates an expected call of ListLogicalSwitch.
func (mr *MockLogicalSwitchMockRecorder) ListLogicalSwitch(needVendorFilter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogicalSwitch", reflect.TypeOf((*MockLogicalSwitch)(nil).ListLogicalSwitch), needVendorFilter)
}

// LogicalSwitchExists mocks base method.
func (m *MockLogicalSwitch) LogicalSwitchExists(lsName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogicalSwitchExists", lsName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogicalSwitchExists indicates an expected call of LogicalSwitchExists.
func (mr *MockLogicalSwitchMockRecorder) LogicalSwitchExists(lsName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogicalSwitchExists", reflect.TypeOf((*MockLogicalSwitch)(nil).LogicalSwitchExists), lsName)
}

// LogicalSwitchUpdateLoadBalancers mocks base method.
func (m *MockLogicalSwitch) LogicalSwitchUpdateLoadBalancers(lsName string, op ovsdb.Mutator, lbNames ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{lsName, op}
	for _, a := range lbNames {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LogicalSwitchUpdateLoadBalancers", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogicalSwitchUpdateLoadBalancers indicates an expected call of LogicalSwitchUpdateLoadBalancers.
func (mr *MockLogicalSwitchMockRecorder) LogicalSwitchUpdateLoadBalancers(lsName, op interface{}, lbNames ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{lsName, op}, lbNames...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogicalSwitchUpdateLoadBalancers", reflect.TypeOf((*MockLogicalSwitch)(nil).LogicalSwitchUpdateLoadBalancers), varargs...)
}

// MockLogicalSwitchPort is a mock of LogicalSwitchPort interface.
type MockLogicalSwitchPort struct {
	ctrl     *gomock.Controller
	recorder *MockLogicalSwitchPortMockRecorder
}

// MockLogicalSwitchPortMockRecorder is the mock recorder for MockLogicalSwitchPort.
type MockLogicalSwitchPortMockRecorder struct {
	mock *MockLogicalSwitchPort
}

// NewMockLogicalSwitchPort creates a new mock instance.
func NewMockLogicalSwitchPort(ctrl *gomock.Controller) *MockLogicalSwitchPort {
	mock := &MockLogicalSwitchPort{ctrl: ctrl}
	mock.recorder = &MockLogicalSwitchPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogicalSwitchPort) EXPECT() *MockLogicalSwitchPortMockRecorder {
	return m.recorder
}

// CreateBareLogicalSwitchPort mocks base method.
func (m *MockLogicalSwitchPort) CreateBareLogicalSwitchPort(lsName, lspName, ip, mac string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBareLogicalSwitchPort", lsName, lspName, ip, mac)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBareLogicalSwitchPort indicates an expected call of CreateBareLogicalSwitchPort.
func (mr *MockLogicalSwitchPortMockRecorder) CreateBareLogicalSwitchPort(lsName, lspName, ip, mac interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBareLogicalSwitchPort", reflect.TypeOf((*MockLogicalSwitchPort)(nil).CreateBareLogicalSwitchPort), lsName, lspName, ip, mac)
}

// CreateLocalnetLogicalSwitchPort mocks base method.
func (m *MockLogicalSwitchPort) CreateLocalnetLogicalSwitchPort(lsName, lspName, provider string, vlanID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLocalnetLogicalSwitchPort", lsName, lspName, provider, vlanID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLocalnetLogicalSwitchPort indicates an expected call of CreateLocalnetLogicalSwitchPort.
func (mr *MockLogicalSwitchPortMockRecorder) CreateLocalnetLogicalSwitchPort(lsName, lspName, provider, vlanID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLocalnetLogicalSwitchPort", reflect.TypeOf((*MockLogicalSwitchPort)(nil).CreateLocalnetLogicalSwitchPort), lsName, lspName, provider, vlanID)
}

// CreateLogicalSwitchPort mocks base method.
func (m *MockLogicalSwitchPort) CreateLogicalSwitchPort(lsName, lspName, ip, mac, podName, namespace string, portSecurity bool, securityGroups, vips string, enableDHCP bool, dhcpOptions *ovs.DHCPOptionsUUIDs, vpc string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLogicalSwitchPort", lsName, lspName, ip, mac, podName, namespace, portSecurity, securityGroups, vips, enableDHCP, dhcpOptions, vpc)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLogicalSwitchPort indicates an expected call of CreateLogicalSwitchPort.
func (mr *MockLogicalSwitchPortMockRecorder) CreateLogicalSwitchPort(lsName, lspName, ip, mac, podName, namespace, portSecurity, securityGroups, vips, enableDHCP, dhcpOptions, vpc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLogicalSwitchPort", reflect.TypeOf((*MockLogicalSwitchPort)(nil).CreateLogicalSwitchPort), lsName, lspName, ip, mac, podName, namespace, portSecurity, securityGroups, vips, enableDHCP, dhcpOptions, vpc)
}

// CreateVirtualLogicalSwitchPorts mocks base method.
func (m *MockLogicalSwitchPort) CreateVirtualLogicalSwitchPorts(lsName string, ips ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{lsName}
	for _, a := range ips {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVirtualLogicalSwitchPorts", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVirtualLogicalSwitchPorts indicates an expected call of CreateVirtualLogicalSwitchPorts.
func (mr *MockLogicalSwitchPortMockRecorder) CreateVirtualLogicalSwitchPorts(lsName interface{}, ips ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{lsName}, ips...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualLogicalSwitchPorts", reflect.TypeOf((*MockLogicalSwitchPort)(nil).CreateVirtualLogicalSwitchPorts), varargs...)
}

// DeleteLogicalSwitchPort mocks base method.
func (m *MockLogicalSwitchPort) DeleteLogicalSwitchPort(lspName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLogicalSwitchPort", lspName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLogicalSwitchPort indicates an expected call of DeleteLogicalSwitchPort.
func (mr *MockLogicalSwitchPortMockRecorder) DeleteLogicalSwitchPort(lspName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLogicalSwitchPort", reflect.TypeOf((*MockLogicalSwitchPort)(nil).DeleteLogicalSwitchPort), lspName)
}

// EnablePortLayer2forward mocks base method.
func (m *MockLogicalSwitchPort) EnablePortLayer2forward(lspName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnablePortLayer2forward", lspName)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnablePortLayer2forward indicates an expected call of EnablePortLayer2forward.
func (mr *MockLogicalSwitchPortMockRecorder) EnablePortLayer2forward(lspName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnablePortLayer2forward", reflect.TypeOf((*MockLogicalSwitchPort)(nil).EnablePortLayer2forward), lspName)
}

// GetLogicalSwitchPort mocks base method.
func (m *MockLogicalSwitchPort) GetLogicalSwitchPort(lspName string, ignoreNotFound bool) (*ovnnb.LogicalSwitchPort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogicalSwitchPort", lspName, ignoreNotFound)
	ret0, _ := ret[0].(*ovnnb.LogicalSwitchPort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogicalSwitchPort indicates an expected call of GetLogicalSwitchPort.
func (mr *MockLogicalSwitchPortMockRecorder) GetLogicalSwitchPort(lspName, ignoreNotFound interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogicalSwitchPort", reflect.TypeOf((*MockLogicalSwitchPort)(nil).GetLogicalSwitchPort), lspName, ignoreNotFound)
}

// ListLogicalSwitchPorts mocks base method.
func (m *MockLogicalSwitchPort) ListLogicalSwitchPorts(needVendorFilter bool, externalIDs map[string]string) ([]ovnnb.LogicalSwitchPort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLogicalSwitchPorts", needVendorFilter, externalIDs)
	ret0, _ := ret[0].([]ovnnb.LogicalSwitchPort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLogicalSwitchPorts indicates an expected call of ListLogicalSwitchPorts.
func (mr *MockLogicalSwitchPortMockRecorder) ListLogicalSwitchPorts(needVendorFilter, externalIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogicalSwitchPorts", reflect.TypeOf((*MockLogicalSwitchPort)(nil).ListLogicalSwitchPorts), needVendorFilter, externalIDs)
}

// ListRemoteTypeLogicalSwitchPorts mocks base method.
func (m *MockLogicalSwitchPort) ListRemoteTypeLogicalSwitchPorts() ([]ovnnb.LogicalSwitchPort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRemoteTypeLogicalSwitchPorts")
	ret0, _ := ret[0].([]ovnnb.LogicalSwitchPort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRemoteTypeLogicalSwitchPorts indicates an expected call of ListRemoteTypeLogicalSwitchPorts.
func (mr *MockLogicalSwitchPortMockRecorder) ListRemoteTypeLogicalSwitchPorts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRemoteTypeLogicalSwitchPorts", reflect.TypeOf((*MockLogicalSwitchPort)(nil).ListRemoteTypeLogicalSwitchPorts))
}

// ListVirtualTypeLogicalSwitchPorts mocks base method.
func (m *MockLogicalSwitchPort) ListVirtualTypeLogicalSwitchPorts(lsName string) ([]ovnnb.LogicalSwitchPort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVirtualTypeLogicalSwitchPorts", lsName)
	ret0, _ := ret[0].([]ovnnb.LogicalSwitchPort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualTypeLogicalSwitchPorts indicates an expected call of ListVirtualTypeLogicalSwitchPorts.
func (mr *MockLogicalSwitchPortMockRecorder) ListVirtualTypeLogicalSwitchPorts(lsName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualTypeLogicalSwitchPorts", reflect.TypeOf((*MockLogicalSwitchPort)(nil).ListVirtualTypeLogicalSwitchPorts), lsName)
}

// LogicalSwitchPortExists mocks base method.
func (m *MockLogicalSwitchPort) LogicalSwitchPortExists(name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogicalSwitchPortExists", name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogicalSwitchPortExists indicates an expected call of LogicalSwitchPortExists.
func (mr *MockLogicalSwitchPortMockRecorder) LogicalSwitchPortExists(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogicalSwitchPortExists", reflect.TypeOf((*MockLogicalSwitchPort)(nil).LogicalSwitchPortExists), name)
}

// SetLogicalSwitchPortExternalIds mocks base method.
func (m *MockLogicalSwitchPort) SetLogicalSwitchPortExternalIds(lspName string, externalIds map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLogicalSwitchPortExternalIds", lspName, externalIds)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLogicalSwitchPortExternalIds indicates an expected call of SetLogicalSwitchPortExternalIds.
func (mr *MockLogicalSwitchPortMockRecorder) SetLogicalSwitchPortExternalIds(lspName, externalIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogicalSwitchPortExternalIds", reflect.TypeOf((*MockLogicalSwitchPort)(nil).SetLogicalSwitchPortExternalIds), lspName, externalIds)
}

// SetLogicalSwitchPortSecurity mocks base method.
func (m *MockLogicalSwitchPort) SetLogicalSwitchPortSecurity(portSecurity bool, lspName, mac, ips, vips string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLogicalSwitchPortSecurity", portSecurity, lspName, mac, ips, vips)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLogicalSwitchPortSecurity indicates an expected call of SetLogicalSwitchPortSecurity.
func (mr *MockLogicalSwitchPortMockRecorder) SetLogicalSwitchPortSecurity(portSecurity, lspName, mac, ips, vips interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogicalSwitchPortSecurity", reflect.TypeOf((*MockLogicalSwitchPort)(nil).SetLogicalSwitchPortSecurity), portSecurity, lspName, mac, ips, vips)
}

// SetLogicalSwitchPortVirtualParents mocks base method.
func (m *MockLogicalSwitchPort) SetLogicalSwitchPortVirtualParents(lsName, parents string, ips ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{lsName, parents}
	for _, a := range ips {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetLogicalSwitchPortVirtualParents", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLogicalSwitchPortVirtualParents indicates an expected call of SetLogicalSwitchPortVirtualParents.
func (mr *MockLogicalSwitchPortMockRecorder) SetLogicalSwitchPortVirtualParents(lsName, parents interface{}, ips ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{lsName, parents}, ips...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogicalSwitchPortVirtualParents", reflect.TypeOf((*MockLogicalSwitchPort)(nil).SetLogicalSwitchPortVirtualParents), varargs...)
}

// SetLogicalSwitchPortVlanTag mocks base method.
func (m *MockLogicalSwitchPort) SetLogicalSwitchPortVlanTag(lspName string, vlanID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLogicalSwitchPortVlanTag", lspName, vlanID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLogicalSwitchPortVlanTag indicates an expected call of SetLogicalSwitchPortVlanTag.
func (mr *MockLogicalSwitchPortMockRecorder) SetLogicalSwitchPortVlanTag(lspName, vlanID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogicalSwitchPortVlanTag", reflect.TypeOf((*MockLogicalSwitchPort)(nil).SetLogicalSwitchPortVlanTag), lspName, vlanID)
}

// MockLoadBalancer is a mock of LoadBalancer interface.
type MockLoadBalancer struct {
	ctrl     *gomock.Controller
	recorder *MockLoadBalancerMockRecorder
}

// MockLoadBalancerMockRecorder is the mock recorder for MockLoadBalancer.
type MockLoadBalancerMockRecorder struct {
	mock *MockLoadBalancer
}

// NewMockLoadBalancer creates a new mock instance.
func NewMockLoadBalancer(ctrl *gomock.Controller) *MockLoadBalancer {
	mock := &MockLoadBalancer{ctrl: ctrl}
	mock.recorder = &MockLoadBalancerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoadBalancer) EXPECT() *MockLoadBalancerMockRecorder {
	return m.recorder
}

// CreateLoadBalancer mocks base method.
func (m *MockLoadBalancer) CreateLoadBalancer(lbName, protocol, selectFields string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoadBalancer", lbName, protocol, selectFields)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLoadBalancer indicates an expected call of CreateLoadBalancer.
func (mr *MockLoadBalancerMockRecorder) CreateLoadBalancer(lbName, protocol, selectFields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoadBalancer", reflect.TypeOf((*MockLoadBalancer)(nil).CreateLoadBalancer), lbName, protocol, selectFields)
}

// DeleteLoadBalancers mocks base method.
func (m *MockLoadBalancer) DeleteLoadBalancers(filter func(*ovnnb.LoadBalancer) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLoadBalancers", filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLoadBalancers indicates an expected call of DeleteLoadBalancers.
func (mr *MockLoadBalancerMockRecorder) DeleteLoadBalancers(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoadBalancers", reflect.TypeOf((*MockLoadBalancer)(nil).DeleteLoadBalancers), filter)
}

// GetLoadBalancer mocks base method.
func (m *MockLoadBalancer) GetLoadBalancer(lbName string, ignoreNotFound bool) (*ovnnb.LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancer", lbName, ignoreNotFound)
	ret0, _ := ret[0].(*ovnnb.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoadBalancer indicates an expected call of GetLoadBalancer.
func (mr *MockLoadBalancerMockRecorder) GetLoadBalancer(lbName, ignoreNotFound interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancer", reflect.TypeOf((*MockLoadBalancer)(nil).GetLoadBalancer), lbName, ignoreNotFound)
}

// ListLoadBalancers mocks base method.
func (m *MockLoadBalancer) ListLoadBalancers(filter func(*ovnnb.LoadBalancer) bool) ([]ovnnb.LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLoadBalancers", filter)
	ret0, _ := ret[0].([]ovnnb.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLoadBalancers indicates an expected call of ListLoadBalancers.
func (mr *MockLoadBalancerMockRecorder) ListLoadBalancers(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoadBalancers", reflect.TypeOf((*MockLoadBalancer)(nil).ListLoadBalancers), filter)
}

// LoadBalancerDeleteVips mocks base method.
func (m *MockLoadBalancer) LoadBalancerDeleteVips(lbName string, vips map[string]struct{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadBalancerDeleteVips", lbName, vips)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadBalancerDeleteVips indicates an expected call of LoadBalancerDeleteVips.
func (mr *MockLoadBalancerMockRecorder) LoadBalancerDeleteVips(lbName, vips interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadBalancerDeleteVips", reflect.TypeOf((*MockLoadBalancer)(nil).LoadBalancerDeleteVips), lbName, vips)
}

// LoadBalancerExists mocks base method.
func (m *MockLoadBalancer) LoadBalancerExists(lbName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadBalancerExists", lbName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadBalancerExists indicates an expected call of LoadBalancerExists.
func (mr *MockLoadBalancerMockRecorder) LoadBalancerExists(lbName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadBalancerExists", reflect.TypeOf((*MockLoadBalancer)(nil).LoadBalancerExists), lbName)
}

// LoadBalancerUpdateVips mocks base method.
func (m *MockLoadBalancer) LoadBalancerUpdateVips(lbName string, vips map[string]string, op ovsdb.Mutator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadBalancerUpdateVips", lbName, vips, op)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadBalancerUpdateVips indicates an expected call of LoadBalancerUpdateVips.
func (mr *MockLoadBalancerMockRecorder) LoadBalancerUpdateVips(lbName, vips, op interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadBalancerUpdateVips", reflect.TypeOf((*MockLoadBalancer)(nil).LoadBalancerUpdateVips), lbName, vips, op)
}

// MockPortGroup is a mock of PortGroup interface.
type MockPortGroup struct {
	ctrl     *gomock.Controller
	recorder *MockPortGroupMockRecorder
}

// MockPortGroupMockRecorder is the mock recorder for MockPortGroup.
type MockPortGroupMockRecorder struct {
	mock *MockPortGroup
}

// NewMockPortGroup creates a new mock instance.
func NewMockPortGroup(ctrl *gomock.Controller) *MockPortGroup {
	mock := &MockPortGroup{ctrl: ctrl}
	mock.recorder = &MockPortGroupMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortGroup) EXPECT() *MockPortGroupMockRecorder {
	return m.recorder
}

// CreatePortGroup mocks base method.
func (m *MockPortGroup) CreatePortGroup(pgName string, externalIDs map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePortGroup", pgName, externalIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePortGroup indicates an expected call of CreatePortGroup.
func (mr *MockPortGroupMockRecorder) CreatePortGroup(pgName, externalIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePortGroup", reflect.TypeOf((*MockPortGroup)(nil).CreatePortGroup), pgName, externalIDs)
}

// DeletePortGroup mocks base method.
func (m *MockPortGroup) DeletePortGroup(pgName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePortGroup", pgName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePortGroup indicates an expected call of DeletePortGroup.
func (mr *MockPortGroupMockRecorder) DeletePortGroup(pgName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePortGroup", reflect.TypeOf((*MockPortGroup)(nil).DeletePortGroup), pgName)
}

// GetPortGroup mocks base method.
func (m *MockPortGroup) GetPortGroup(pgName string, ignoreNotFound bool) (*ovnnb.PortGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPortGroup", pgName, ignoreNotFound)
	ret0, _ := ret[0].(*ovnnb.PortGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPortGroup indicates an expected call of GetPortGroup.
func (mr *MockPortGroupMockRecorder) GetPortGroup(pgName, ignoreNotFound interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPortGroup", reflect.TypeOf((*MockPortGroup)(nil).GetPortGroup), pgName, ignoreNotFound)
}

// ListPortGroups mocks base method.
func (m *MockPortGroup) ListPortGroups(externalIDs map[string]string) ([]ovnnb.PortGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPortGroups", externalIDs)
	ret0, _ := ret[0].([]ovnnb.PortGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPortGroups indicates an expected call of ListPortGroups.
func (mr *MockPortGroupMockRecorder) ListPortGroups(externalIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPortGroups", reflect.TypeOf((*MockPortGroup)(nil).ListPortGroups), externalIDs)
}

// PortGroupAddPorts mocks base method.
func (m *MockPortGroup) PortGroupAddPorts(pgName string, lspNames ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{pgName}
	for _, a := range lspNames {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PortGroupAddPorts", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PortGroupAddPorts indicates an expected call of PortGroupAddPorts.
func (mr *MockPortGroupMockRecorder) PortGroupAddPorts(pgName interface{}, lspNames ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{pgName}, lspNames...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortGroupAddPorts", reflect.TypeOf((*MockPortGroup)(nil).PortGroupAddPorts), varargs...)
}

// PortGroupExists mocks base method.
func (m *MockPortGroup) PortGroupExists(pgName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PortGroupExists", pgName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PortGroupExists indicates an expected call of PortGroupExists.
func (mr *MockPortGroupMockRecorder) PortGroupExists(pgName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortGroupExists", reflect.TypeOf((*MockPortGroup)(nil).PortGroupExists), pgName)
}

// PortGroupRemovePorts mocks base method.
func (m *MockPortGroup) PortGroupRemovePorts(pgName string, lspNames ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{pgName}
	for _, a := range lspNames {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PortGroupRemovePorts", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PortGroupRemovePorts indicates an expected call of PortGroupRemovePorts.
func (mr *MockPortGroupMockRecorder) PortGroupRemovePorts(pgName interface{}, lspNames ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{pgName}, lspNames...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortGroupRemovePorts", reflect.TypeOf((*MockPortGroup)(nil).PortGroupRemovePorts), varargs...)
}

// PortGroupUpdatePorts mocks base method.
func (m *MockPortGroup) PortGroupUpdatePorts(pgName string, op ovsdb.Mutator, lspNames ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{pgName}
	for _, a := range lspNames {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PortGroupRemovePorts", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PortGroupRemovePorts indicates an expected call of PortGroupRemovePorts.
func (mr *MockPortGroupMockRecorder) PortGroupRemovePorts(pgName interface{}, lspNames ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{pgName}, lspNames...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortGroupRemovePorts", reflect.TypeOf((*MockPortGroup)(nil).PortGroupRemovePorts), varargs...)
}

// PortGroupResetPorts mocks base method.
func (m *MockPortGroup) PortGroupResetPorts(pgName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PortGroupResetPorts", pgName)
	ret0, _ := ret[0].(error)
	return ret0
}

// PortGroupResetPorts indicates an expected call of PortGroupResetPorts.
func (mr *MockPortGroupMockRecorder) PortGroupResetPorts(pgName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortGroupResetPorts", reflect.TypeOf((*MockPortGroup)(nil).PortGroupResetPorts), pgName)
}

// MockLogicalRouterStaticRoute is a mock of LogicalRouterStaticRoute interface.
type MockLogicalRouterStaticRoute struct {
	ctrl     *gomock.Controller
	recorder *MockLogicalRouterStaticRouteMockRecorder
}

// MockLogicalRouterStaticRouteMockRecorder is the mock recorder for MockLogicalRouterStaticRoute.
type MockLogicalRouterStaticRouteMockRecorder struct {
	mock *MockLogicalRouterStaticRoute
}

// NewMockLogicalRouterStaticRoute creates a new mock instance.
func NewMockLogicalRouterStaticRoute(ctrl *gomock.Controller) *MockLogicalRouterStaticRoute {
	mock := &MockLogicalRouterStaticRoute{ctrl: ctrl}
	mock.recorder = &MockLogicalRouterStaticRouteMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogicalRouterStaticRoute) EXPECT() *MockLogicalRouterStaticRouteMockRecorder {
	return m.recorder
}

// GetLogicalRouterRouteByOpts mocks base method.
func (m *MockLogicalRouterStaticRoute) GetLogicalRouterRouteByOpts(key, value string) ([]ovnnb.LogicalRouterStaticRoute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogicalRouterRouteByOpts", key, value)
	ret0, _ := ret[0].([]ovnnb.LogicalRouterStaticRoute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogicalRouterRouteByOpts indicates an expected call of GetLogicalRouterRouteByOpts.
func (mr *MockLogicalRouterStaticRouteMockRecorder) GetLogicalRouterRouteByOpts(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogicalRouterRouteByOpts", reflect.TypeOf((*MockLogicalRouterStaticRoute)(nil).GetLogicalRouterRouteByOpts), key, value)
}

// ListLogicalRouterStaticRoutes mocks base method.
func (m *MockLogicalRouterStaticRoute) ListLogicalRouterStaticRoutes(externalIDs map[string]string) ([]ovnnb.LogicalRouterStaticRoute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLogicalRouterStaticRoutes", externalIDs)
	ret0, _ := ret[0].([]ovnnb.LogicalRouterStaticRoute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLogicalRouterStaticRoutes indicates an expected call of ListLogicalRouterStaticRoutes.
func (mr *MockLogicalRouterStaticRouteMockRecorder) ListLogicalRouterStaticRoutes(externalIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogicalRouterStaticRoutes", reflect.TypeOf((*MockLogicalRouterStaticRoute)(nil).ListLogicalRouterStaticRoutes), externalIDs)
}

// MockLogicalRouterPolicy is a mock of LogicalRouterPolicy interface.
type MockLogicalRouterPolicy struct {
	ctrl     *gomock.Controller
	recorder *MockLogicalRouterPolicyMockRecorder
}

// MockLogicalRouterPolicyMockRecorder is the mock recorder for MockLogicalRouterPolicy.
type MockLogicalRouterPolicyMockRecorder struct {
	mock *MockLogicalRouterPolicy
}

// NewMockLogicalRouterPolicy creates a new mock instance.
func NewMockLogicalRouterPolicy(ctrl *gomock.Controller) *MockLogicalRouterPolicy {
	mock := &MockLogicalRouterPolicy{ctrl: ctrl}
	mock.recorder = &MockLogicalRouterPolicyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogicalRouterPolicy) EXPECT() *MockLogicalRouterPolicyMockRecorder {
	return m.recorder
}

// AddLogicalRouterPolicy mocks base method.
func (m *MockLogicalRouterPolicy) AddLogicalRouterPolicy(lrName string, priority int, match, action string, nextHops []string, externalIDs map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLogicalRouterPolicy", lrName, priority, match, action, nextHops, externalIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLogicalRouterPolicy indicates an expected call of AddLogicalRouterPolicy.
func (mr *MockLogicalRouterPolicyMockRecorder) AddLogicalRouterPolicy(lrName, priority, match, action, nextHops, externalIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLogicalRouterPolicy", reflect.TypeOf((*MockLogicalRouterPolicy)(nil).AddLogicalRouterPolicy), lrName, priority, match, action, nextHops, externalIDs)
}

// DeleteLogicalRouterPolicy mocks base method.
func (m *MockLogicalRouterPolicy) DeleteLogicalRouterPolicy(lrName string, priority int, match string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLogicalRouterPolicy", lrName, priority, match)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLogicalRouterPolicy indicates an expected call of DeleteLogicalRouterPolicy.
func (mr *MockLogicalRouterPolicyMockRecorder) DeleteLogicalRouterPolicy(lrName, priority, match interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLogicalRouterPolicy", reflect.TypeOf((*MockLogicalRouterPolicy)(nil).DeleteLogicalRouterPolicy), lrName, priority, match)
}

// DeleteRouterPolicy mocks base method.
func (m *MockLogicalRouterPolicy) DeleteRouterPolicy(lr *ovnnb.LogicalRouter, uuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouterPolicy", lr, uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRouterPolicy indicates an expected call of DeleteRouterPolicy.
func (mr *MockLogicalRouterPolicyMockRecorder) DeleteRouterPolicy(lr, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouterPolicy", reflect.TypeOf((*MockLogicalRouterPolicy)(nil).DeleteRouterPolicy), lr, uuid)
}

// ListLogicalRouterPolicies mocks base method.
func (m *MockLogicalRouterPolicy) ListLogicalRouterPolicies(externalIDs map[string]string) ([]ovnnb.LogicalRouterPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLogicalRouterPolicies", externalIDs)
	ret0, _ := ret[0].([]ovnnb.LogicalRouterPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLogicalRouterPolicies indicates an expected call of ListLogicalRouterPolicies.
func (mr *MockLogicalRouterPolicyMockRecorder) ListLogicalRouterPolicies(externalIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogicalRouterPolicies", reflect.TypeOf((*MockLogicalRouterPolicy)(nil).ListLogicalRouterPolicies), externalIDs)
}

// MockNAT is a mock of NAT interface.
type MockNAT struct {
	ctrl     *gomock.Controller
	recorder *MockNATMockRecorder
}

// MockNATMockRecorder is the mock recorder for MockNAT.
type MockNATMockRecorder struct {
	mock *MockNAT
}

// NewMockNAT creates a new mock instance.
func NewMockNAT(ctrl *gomock.Controller) *MockNAT {
	mock := &MockNAT{ctrl: ctrl}
	mock.recorder = &MockNATMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNAT) EXPECT() *MockNATMockRecorder {
	return m.recorder
}

// DeleteNats mocks base method.
func (m *MockNAT) DeleteNats(lrName, natType, logicalIP string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNats", lrName, natType, logicalIP)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNats indicates an expected call of DeleteNats.
func (mr *MockNATMockRecorder) DeleteNats(lrName, natType, logicalIP interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNats", reflect.TypeOf((*MockNAT)(nil).DeleteNats), lrName, natType, logicalIP)
}

// UpdateDnatAndSnat mocks base method.
func (m *MockNAT) UpdateDnatAndSnat(lrName, externalIP, logicalIP, lspName, externalMac, gatewayType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDnatAndSnat", lrName, externalIP, logicalIP, lspName, externalMac, gatewayType)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDnatAndSnat indicates an expected call of UpdateDnatAndSnat.
func (mr *MockNATMockRecorder) UpdateDnatAndSnat(lrName, externalIP, logicalIP, lspName, externalMac, gatewayType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDnatAndSnat", reflect.TypeOf((*MockNAT)(nil).UpdateDnatAndSnat), lrName, externalIP, logicalIP, lspName, externalMac, gatewayType)
}

// UpdateSnat mocks base method.
func (m *MockNAT) UpdateSnat(lrName, externalIP, logicalIP string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSnat", lrName, externalIP, logicalIP)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSnat indicates an expected call of UpdateSnat.
func (mr *MockNATMockRecorder) UpdateSnat(lrName, externalIP, logicalIP interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSnat", reflect.TypeOf((*MockNAT)(nil).UpdateSnat), lrName, externalIP, logicalIP)
}

// MockOvnClient is a mock of OvnClient interface.
type MockOvnClient struct {
	ctrl     *gomock.Controller
	recorder *MockOvnClientMockRecorder
}

// MockOvnClientMockRecorder is the mock recorder for MockOvnClient.
type MockOvnClientMockRecorder struct {
	mock *MockOvnClient
}

// NewMockOvnClient creates a new mock instance.
func NewMockOvnClient(ctrl *gomock.Controller) *MockOvnClient {
	mock := &MockOvnClient{ctrl: ctrl}
	mock.recorder = &MockOvnClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOvnClient) EXPECT() *MockOvnClientMockRecorder {
	return m.recorder
}

// AddLogicalRouterPolicy mocks base method.
func (m *MockOvnClient) AddLogicalRouterPolicy(lrName string, priority int, match, action string, nextHops []string, externalIDs map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLogicalRouterPolicy", lrName, priority, match, action, nextHops, externalIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLogicalRouterPolicy indicates an expected call of AddLogicalRouterPolicy.
func (mr *MockOvnClientMockRecorder) AddLogicalRouterPolicy(lrName, priority, match, action, nextHops, externalIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLogicalRouterPolicy", reflect.TypeOf((*MockOvnClient)(nil).AddLogicalRouterPolicy), lrName, priority, match, action, nextHops, externalIDs)
}

// CreateBareLogicalSwitch mocks base method.
func (m *MockOvnClient) CreateBareLogicalSwitch(lsName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBareLogicalSwitch", lsName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBareLogicalSwitch indicates an expected call of CreateBareLogicalSwitch.
func (mr *MockOvnClientMockRecorder) CreateBareLogicalSwitch(lsName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBareLogicalSwitch", reflect.TypeOf((*MockOvnClient)(nil).CreateBareLogicalSwitch), lsName)
}

// CreateBareLogicalSwitchPort mocks base method.
func (m *MockOvnClient) CreateBareLogicalSwitchPort(lsName, lspName, ip, mac string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBareLogicalSwitchPort", lsName, lspName, ip, mac)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBareLogicalSwitchPort indicates an expected call of CreateBareLogicalSwitchPort.
func (mr *MockOvnClientMockRecorder) CreateBareLogicalSwitchPort(lsName, lspName, ip, mac interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBareLogicalSwitchPort", reflect.TypeOf((*MockOvnClient)(nil).CreateBareLogicalSwitchPort), lsName, lspName, ip, mac)
}

// CreateGatewayLogicalSwitch mocks base method.
func (m *MockOvnClient) CreateGatewayLogicalSwitch(lsName, lrName, provider, ip, mac string, vlanID int, chassises ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{lsName, lrName, provider, ip, mac, vlanID}
	for _, a := range chassises {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGatewayLogicalSwitch", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGatewayLogicalSwitch indicates an expected call of CreateGatewayLogicalSwitch.
func (mr *MockOvnClientMockRecorder) CreateGatewayLogicalSwitch(lsName, lrName, provider, ip, mac, vlanID interface{}, chassises ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{lsName, lrName, provider, ip, mac, vlanID}, chassises...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGatewayLogicalSwitch", reflect.TypeOf((*MockOvnClient)(nil).CreateGatewayLogicalSwitch), varargs...)
}

// CreateLoadBalancer mocks base method.
func (m *MockOvnClient) CreateLoadBalancer(lbName, protocol, selectFields string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoadBalancer", lbName, protocol, selectFields)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLoadBalancer indicates an expected call of CreateLoadBalancer.
func (mr *MockOvnClientMockRecorder) CreateLoadBalancer(lbName, protocol, selectFields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoadBalancer", reflect.TypeOf((*MockOvnClient)(nil).CreateLoadBalancer), lbName, protocol, selectFields)
}

// CreateLocalnetLogicalSwitchPort mocks base method.
func (m *MockOvnClient) CreateLocalnetLogicalSwitchPort(lsName, lspName, provider string, vlanID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLocalnetLogicalSwitchPort", lsName, lspName, provider, vlanID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLocalnetLogicalSwitchPort indicates an expected call of CreateLocalnetLogicalSwitchPort.
func (mr *MockOvnClientMockRecorder) CreateLocalnetLogicalSwitchPort(lsName, lspName, provider, vlanID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLocalnetLogicalSwitchPort", reflect.TypeOf((*MockOvnClient)(nil).CreateLocalnetLogicalSwitchPort), lsName, lspName, provider, vlanID)
}

// CreateLogicalPatchPort mocks base method.
func (m *MockOvnClient) CreateLogicalPatchPort(lsName, lrName, lspName, lrpName, ip, mac string, chassises ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{lsName, lrName, lspName, lrpName, ip, mac}
	for _, a := range chassises {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLogicalPatchPort", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLogicalPatchPort indicates an expected call of CreateLogicalPatchPort.
func (mr *MockOvnClientMockRecorder) CreateLogicalPatchPort(lsName, lrName, lspName, lrpName, ip, mac interface{}, chassises ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{lsName, lrName, lspName, lrpName, ip, mac}, chassises...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLogicalPatchPort", reflect.TypeOf((*MockOvnClient)(nil).CreateLogicalPatchPort), varargs...)
}

// CreateLogicalRouter mocks base method.
func (m *MockOvnClient) CreateLogicalRouter(lrName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLogicalRouter", lrName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLogicalRouter indicates an expected call of CreateLogicalRouter.
func (mr *MockOvnClientMockRecorder) CreateLogicalRouter(lrName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLogicalRouter", reflect.TypeOf((*MockOvnClient)(nil).CreateLogicalRouter), lrName)
}

// CreateLogicalSwitch mocks base method.
func (m *MockOvnClient) CreateLogicalSwitch(lsName, lrName, cidrBlock, gateway string, needRouter bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLogicalSwitch", lsName, lrName, cidrBlock, gateway, needRouter)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLogicalSwitch indicates an expected call of CreateLogicalSwitch.
func (mr *MockOvnClientMockRecorder) CreateLogicalSwitch(lsName, lrName, cidrBlock, gateway, needRouter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLogicalSwitch", reflect.TypeOf((*MockOvnClient)(nil).CreateLogicalSwitch), lsName, lrName, cidrBlock, gateway, needRouter)
}

// CreateLogicalSwitchPort mocks base method.
func (m *MockOvnClient) CreateLogicalSwitchPort(lsName, lspName, ip, mac, podName, namespace string, portSecurity bool, securityGroups, vips string, enableDHCP bool, dhcpOptions *ovs.DHCPOptionsUUIDs, vpc string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLogicalSwitchPort", lsName, lspName, ip, mac, podName, namespace, portSecurity, securityGroups, vips, enableDHCP, dhcpOptions, vpc)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLogicalSwitchPort indicates an expected call of CreateLogicalSwitchPort.
func (mr *MockOvnClientMockRecorder) CreateLogicalSwitchPort(lsName, lspName, ip, mac, podName, namespace, portSecurity, securityGroups, vips, enableDHCP, dhcpOptions, vpc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLogicalSwitchPort", reflect.TypeOf((*MockOvnClient)(nil).CreateLogicalSwitchPort), lsName, lspName, ip, mac, podName, namespace, portSecurity, securityGroups, vips, enableDHCP, dhcpOptions, vpc)
}

// CreatePeerRouterPort mocks base method.
func (m *MockOvnClient) CreatePeerRouterPort(localRouter, remoteRouter, localRouterPortIP string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePeerRouterPort", localRouter, remoteRouter, localRouterPortIP)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePeerRouterPort indicates an expected call of CreatePeerRouterPort.
func (mr *MockOvnClientMockRecorder) CreatePeerRouterPort(localRouter, remoteRouter, localRouterPortIP interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePeerRouterPort", reflect.TypeOf((*MockOvnClient)(nil).CreatePeerRouterPort), localRouter, remoteRouter, localRouterPortIP)
}

// CreatePortGroup mocks base method.
func (m *MockOvnClient) CreatePortGroup(pgName string, externalIDs map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePortGroup", pgName, externalIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePortGroup indicates an expected call of CreatePortGroup.
func (mr *MockOvnClientMockRecorder) CreatePortGroup(pgName, externalIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePortGroup", reflect.TypeOf((*MockOvnClient)(nil).CreatePortGroup), pgName, externalIDs)
}

// CreateVirtualLogicalSwitchPorts mocks base method.
func (m *MockOvnClient) CreateVirtualLogicalSwitchPorts(lsName string, ips ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{lsName}
	for _, a := range ips {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVirtualLogicalSwitchPorts", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVirtualLogicalSwitchPorts indicates an expected call of CreateVirtualLogicalSwitchPorts.
func (mr *MockOvnClientMockRecorder) CreateVirtualLogicalSwitchPorts(lsName interface{}, ips ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{lsName}, ips...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualLogicalSwitchPorts", reflect.TypeOf((*MockOvnClient)(nil).CreateVirtualLogicalSwitchPorts), varargs...)
}

// DeleteLoadBalancers mocks base method.
func (m *MockOvnClient) DeleteLoadBalancers(filter func(*ovnnb.LoadBalancer) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLoadBalancers", filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLoadBalancers indicates an expected call of DeleteLoadBalancers.
func (mr *MockOvnClientMockRecorder) DeleteLoadBalancers(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoadBalancers", reflect.TypeOf((*MockOvnClient)(nil).DeleteLoadBalancers), filter)
}

// DeleteLogicalGatewaySwitch mocks base method.
func (m *MockOvnClient) DeleteLogicalGatewaySwitch(lsName, lrName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLogicalGatewaySwitch", lsName, lrName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLogicalGatewaySwitch indicates an expected call of DeleteLogicalGatewaySwitch.
func (mr *MockOvnClientMockRecorder) DeleteLogicalGatewaySwitch(lsName, lrName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLogicalGatewaySwitch", reflect.TypeOf((*MockOvnClient)(nil).DeleteLogicalGatewaySwitch), lsName, lrName)
}

// DeleteLogicalRouter mocks base method.
func (m *MockOvnClient) DeleteLogicalRouter(lrName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLogicalRouter", lrName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLogicalRouter indicates an expected call of DeleteLogicalRouter.
func (mr *MockOvnClientMockRecorder) DeleteLogicalRouter(lrName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLogicalRouter", reflect.TypeOf((*MockOvnClient)(nil).DeleteLogicalRouter), lrName)
}

// DeleteLogicalRouterPolicy mocks base method.
func (m *MockOvnClient) DeleteLogicalRouterPolicy(lrName string, priority int, match string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLogicalRouterPolicy", lrName, priority, match)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLogicalRouterPolicy indicates an expected call of DeleteLogicalRouterPolicy.
func (mr *MockOvnClientMockRecorder) DeleteLogicalRouterPolicy(lrName, priority, match interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLogicalRouterPolicy", reflect.TypeOf((*MockOvnClient)(nil).DeleteLogicalRouterPolicy), lrName, priority, match)
}

// DeleteLogicalRouterPort mocks base method.
func (m *MockOvnClient) DeleteLogicalRouterPort(lrpName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLogicalRouterPort", lrpName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLogicalRouterPort indicates an expected call of DeleteLogicalRouterPort.
func (mr *MockOvnClientMockRecorder) DeleteLogicalRouterPort(lrpName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLogicalRouterPort", reflect.TypeOf((*MockOvnClient)(nil).DeleteLogicalRouterPort), lrpName)
}

// DeleteLogicalRouterPorts mocks base method.
func (m *MockOvnClient) DeleteLogicalRouterPorts(externalIDs map[string]string, filter func(*ovnnb.LogicalRouterPort) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLogicalRouterPorts", externalIDs, filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLogicalRouterPorts indicates an expected call of DeleteLogicalRouterPorts.
func (mr *MockOvnClientMockRecorder) DeleteLogicalRouterPorts(externalIDs, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLogicalRouterPorts", reflect.TypeOf((*MockOvnClient)(nil).DeleteLogicalRouterPorts), externalIDs, filter)
}

// DeleteLogicalSwitch mocks base method.
func (m *MockOvnClient) DeleteLogicalSwitch(lsName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLogicalSwitch", lsName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLogicalSwitch indicates an expected call of DeleteLogicalSwitch.
func (mr *MockOvnClientMockRecorder) DeleteLogicalSwitch(lsName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLogicalSwitch", reflect.TypeOf((*MockOvnClient)(nil).DeleteLogicalSwitch), lsName)
}

// DeleteLogicalSwitchPort mocks base method.
func (m *MockOvnClient) DeleteLogicalSwitchPort(lspName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLogicalSwitchPort", lspName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLogicalSwitchPort indicates an expected call of DeleteLogicalSwitchPort.
func (mr *MockOvnClientMockRecorder) DeleteLogicalSwitchPort(lspName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLogicalSwitchPort", reflect.TypeOf((*MockOvnClient)(nil).DeleteLogicalSwitchPort), lspName)
}

// DeleteNats mocks base method.
func (m *MockOvnClient) DeleteNats(lrName, natType, logicalIP string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNats", lrName, natType, logicalIP)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNats indicates an expected call of DeleteNats.
func (mr *MockOvnClientMockRecorder) DeleteNats(lrName, natType, logicalIP interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNats", reflect.TypeOf((*MockOvnClient)(nil).DeleteNats), lrName, natType, logicalIP)
}

// DeletePortGroup mocks base method.
func (m *MockOvnClient) DeletePortGroup(pgName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePortGroup", pgName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePortGroup indicates an expected call of DeletePortGroup.
func (mr *MockOvnClientMockRecorder) DeletePortGroup(pgName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePortGroup", reflect.TypeOf((*MockOvnClient)(nil).DeletePortGroup), pgName)
}

// DeleteSecurityGroup mocks base method.
func (m *MockOvnClient) DeleteSecurityGroup(sgName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecurityGroup", sgName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecurityGroup indicates an expected call of DeleteSecurityGroup.
func (mr *MockOvnClientMockRecorder) DeleteSecurityGroup(sgName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecurityGroup", reflect.TypeOf((*MockOvnClient)(nil).DeleteSecurityGroup), sgName)
}

// EnablePortLayer2forward mocks base method.
func (m *MockOvnClient) EnablePortLayer2forward(lspName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnablePortLayer2forward", lspName)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnablePortLayer2forward indicates an expected call of EnablePortLayer2forward.
func (mr *MockOvnClientMockRecorder) EnablePortLayer2forward(lspName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnablePortLayer2forward", reflect.TypeOf((*MockOvnClient)(nil).EnablePortLayer2forward), lspName)
}

// GetLoadBalancer mocks base method.
func (m *MockOvnClient) GetLoadBalancer(lbName string, ignoreNotFound bool) (*ovnnb.LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancer", lbName, ignoreNotFound)
	ret0, _ := ret[0].(*ovnnb.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoadBalancer indicates an expected call of GetLoadBalancer.
func (mr *MockOvnClientMockRecorder) GetLoadBalancer(lbName, ignoreNotFound interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancer", reflect.TypeOf((*MockOvnClient)(nil).GetLoadBalancer), lbName, ignoreNotFound)
}

// GetLogicalRouter mocks base method.
func (m *MockOvnClient) GetLogicalRouter(lrName string, ignoreNotFound bool) (*ovnnb.LogicalRouter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogicalRouter", lrName, ignoreNotFound)
	ret0, _ := ret[0].(*ovnnb.LogicalRouter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogicalRouter indicates an expected call of GetLogicalRouter.
func (mr *MockOvnClientMockRecorder) GetLogicalRouter(lrName, ignoreNotFound interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogicalRouter", reflect.TypeOf((*MockOvnClient)(nil).GetLogicalRouter), lrName, ignoreNotFound)
}

// GetLogicalRouterPort mocks base method.
func (m *MockOvnClient) GetLogicalRouterPort(lrpName string, ignoreNotFound bool) (*ovnnb.LogicalRouterPort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogicalRouterPort", lrpName, ignoreNotFound)
	ret0, _ := ret[0].(*ovnnb.LogicalRouterPort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogicalRouterPort indicates an expected call of GetLogicalRouterPort.
func (mr *MockOvnClientMockRecorder) GetLogicalRouterPort(lrpName, ignoreNotFound interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogicalRouterPort", reflect.TypeOf((*MockOvnClient)(nil).GetLogicalRouterPort), lrpName, ignoreNotFound)
}

// GetLogicalRouterRouteByOpts mocks base method.
func (m *MockOvnClient) GetLogicalRouterRouteByOpts(key, value string) ([]ovnnb.LogicalRouterStaticRoute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogicalRouterRouteByOpts", key, value)
	ret0, _ := ret[0].([]ovnnb.LogicalRouterStaticRoute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogicalRouterRouteByOpts indicates an expected call of GetLogicalRouterRouteByOpts.
func (mr *MockOvnClientMockRecorder) GetLogicalRouterRouteByOpts(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogicalRouterRouteByOpts", reflect.TypeOf((*MockOvnClient)(nil).GetLogicalRouterRouteByOpts), key, value)
}

// GetLogicalSwitchPort mocks base method.
func (m *MockOvnClient) GetLogicalSwitchPort(lspName string, ignoreNotFound bool) (*ovnnb.LogicalSwitchPort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogicalSwitchPort", lspName, ignoreNotFound)
	ret0, _ := ret[0].(*ovnnb.LogicalSwitchPort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogicalSwitchPort indicates an expected call of GetLogicalSwitchPort.
func (mr *MockOvnClientMockRecorder) GetLogicalSwitchPort(lspName, ignoreNotFound interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogicalSwitchPort", reflect.TypeOf((*MockOvnClient)(nil).GetLogicalSwitchPort), lspName, ignoreNotFound)
}

// GetNbGlobal mocks base method.
func (m *MockOvnClient) GetNbGlobal() (*ovnnb.NBGlobal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNbGlobal")
	ret0, _ := ret[0].(*ovnnb.NBGlobal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNbGlobal indicates an expected call of GetNbGlobal.
func (mr *MockOvnClientMockRecorder) GetNbGlobal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNbGlobal", reflect.TypeOf((*MockOvnClient)(nil).GetNbGlobal))
}

// GetPortGroup mocks base method.
func (m *MockOvnClient) GetPortGroup(pgName string, ignoreNotFound bool) (*ovnnb.PortGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPortGroup", pgName, ignoreNotFound)
	ret0, _ := ret[0].(*ovnnb.PortGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPortGroup indicates an expected call of GetPortGroup.
func (mr *MockOvnClientMockRecorder) GetPortGroup(pgName, ignoreNotFound interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPortGroup", reflect.TypeOf((*MockOvnClient)(nil).GetPortGroup), pgName, ignoreNotFound)
}

// ListLoadBalancers mocks base method.
func (m *MockOvnClient) ListLoadBalancers(filter func(*ovnnb.LoadBalancer) bool) ([]ovnnb.LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLoadBalancers", filter)
	ret0, _ := ret[0].([]ovnnb.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLoadBalancers indicates an expected call of ListLoadBalancers.
func (mr *MockOvnClientMockRecorder) ListLoadBalancers(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoadBalancers", reflect.TypeOf((*MockOvnClient)(nil).ListLoadBalancers), filter)
}

// ListLogicalRouter mocks base method.
func (m *MockOvnClient) ListLogicalRouter(needVendorFilter bool) ([]ovnnb.LogicalRouter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLogicalRouter", needVendorFilter)
	ret0, _ := ret[0].([]ovnnb.LogicalRouter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLogicalRouter indicates an expected call of ListLogicalRouter.
func (mr *MockOvnClientMockRecorder) ListLogicalRouter(needVendorFilter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogicalRouter", reflect.TypeOf((*MockOvnClient)(nil).ListLogicalRouter), needVendorFilter)
}

// ListLogicalRouterPolicies mocks base method.
func (m *MockOvnClient) ListLogicalRouterPolicies(externalIDs map[string]string) ([]ovnnb.LogicalRouterPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLogicalRouterPolicies", externalIDs)
	ret0, _ := ret[0].([]ovnnb.LogicalRouterPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLogicalRouterPolicies indicates an expected call of ListLogicalRouterPolicies.
func (mr *MockOvnClientMockRecorder) ListLogicalRouterPolicies(externalIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogicalRouterPolicies", reflect.TypeOf((*MockOvnClient)(nil).ListLogicalRouterPolicies), externalIDs)
}

// ListLogicalRouterPorts mocks base method.
func (m *MockOvnClient) ListLogicalRouterPorts(externalIDs map[string]string, filter func(*ovnnb.LogicalRouterPort) bool) ([]ovnnb.LogicalRouterPort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLogicalRouterPorts", externalIDs, filter)
	ret0, _ := ret[0].([]ovnnb.LogicalRouterPort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLogicalRouterPorts indicates an expected call of ListLogicalRouterPorts.
func (mr *MockOvnClientMockRecorder) ListLogicalRouterPorts(externalIDs, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogicalRouterPorts", reflect.TypeOf((*MockOvnClient)(nil).ListLogicalRouterPorts), externalIDs, filter)
}

// ListLogicalRouterStaticRoutes mocks base method.
func (m *MockOvnClient) ListLogicalRouterStaticRoutes(externalIDs map[string]string) ([]ovnnb.LogicalRouterStaticRoute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLogicalRouterStaticRoutes", externalIDs)
	ret0, _ := ret[0].([]ovnnb.LogicalRouterStaticRoute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLogicalRouterStaticRoutes indicates an expected call of ListLogicalRouterStaticRoutes.
func (mr *MockOvnClientMockRecorder) ListLogicalRouterStaticRoutes(externalIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogicalRouterStaticRoutes", reflect.TypeOf((*MockOvnClient)(nil).ListLogicalRouterStaticRoutes), externalIDs)
}

// ListLogicalSwitch mocks base method.
func (m *MockOvnClient) ListLogicalSwitch(needVendorFilter bool) ([]ovnnb.LogicalSwitch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLogicalSwitch", needVendorFilter)
	ret0, _ := ret[0].([]ovnnb.LogicalSwitch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLogicalSwitch indicates an expected call of ListLogicalSwitch.
func (mr *MockOvnClientMockRecorder) ListLogicalSwitch(needVendorFilter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogicalSwitch", reflect.TypeOf((*MockOvnClient)(nil).ListLogicalSwitch), needVendorFilter)
}

// ListLogicalSwitchPorts mocks base method.
func (m *MockOvnClient) ListLogicalSwitchPorts(needVendorFilter bool, externalIDs map[string]string) ([]ovnnb.LogicalSwitchPort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLogicalSwitchPorts", needVendorFilter, externalIDs)
	ret0, _ := ret[0].([]ovnnb.LogicalSwitchPort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLogicalSwitchPorts indicates an expected call of ListLogicalSwitchPorts.
func (mr *MockOvnClientMockRecorder) ListLogicalSwitchPorts(needVendorFilter, externalIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogicalSwitchPorts", reflect.TypeOf((*MockOvnClient)(nil).ListLogicalSwitchPorts), needVendorFilter, externalIDs)
}

// ListPortGroups mocks base method.
func (m *MockOvnClient) ListPortGroups(externalIDs map[string]string) ([]ovnnb.PortGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPortGroups", externalIDs)
	ret0, _ := ret[0].([]ovnnb.PortGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPortGroups indicates an expected call of ListPortGroups.
func (mr *MockOvnClientMockRecorder) ListPortGroups(externalIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPortGroups", reflect.TypeOf((*MockOvnClient)(nil).ListPortGroups), externalIDs)
}

// ListRemoteTypeLogicalSwitchPorts mocks base method.
func (m *MockOvnClient) ListRemoteTypeLogicalSwitchPorts() ([]ovnnb.LogicalSwitchPort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRemoteTypeLogicalSwitchPorts")
	ret0, _ := ret[0].([]ovnnb.LogicalSwitchPort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRemoteTypeLogicalSwitchPorts indicates an expected call of ListRemoteTypeLogicalSwitchPorts.
func (mr *MockOvnClientMockRecorder) ListRemoteTypeLogicalSwitchPorts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRemoteTypeLogicalSwitchPorts", reflect.TypeOf((*MockOvnClient)(nil).ListRemoteTypeLogicalSwitchPorts))
}

// ListVirtualTypeLogicalSwitchPorts mocks base method.
func (m *MockOvnClient) ListVirtualTypeLogicalSwitchPorts(lsName string) ([]ovnnb.LogicalSwitchPort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVirtualTypeLogicalSwitchPorts", lsName)
	ret0, _ := ret[0].([]ovnnb.LogicalSwitchPort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualTypeLogicalSwitchPorts indicates an expected call of ListVirtualTypeLogicalSwitchPorts.
func (mr *MockOvnClientMockRecorder) ListVirtualTypeLogicalSwitchPorts(lsName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualTypeLogicalSwitchPorts", reflect.TypeOf((*MockOvnClient)(nil).ListVirtualTypeLogicalSwitchPorts), lsName)
}

// LoadBalancerDeleteVips mocks base method.
func (m *MockOvnClient) LoadBalancerDeleteVips(lbName string, vips map[string]struct{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadBalancerDeleteVips", lbName, vips)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadBalancerDeleteVips indicates an expected call of LoadBalancerDeleteVips.
func (mr *MockOvnClientMockRecorder) LoadBalancerDeleteVips(lbName, vips interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadBalancerDeleteVips", reflect.TypeOf((*MockOvnClient)(nil).LoadBalancerDeleteVips), lbName, vips)
}

// LoadBalancerExists mocks base method.
func (m *MockOvnClient) LoadBalancerExists(lbName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadBalancerExists", lbName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadBalancerExists indicates an expected call of LoadBalancerExists.
func (mr *MockOvnClientMockRecorder) LoadBalancerExists(lbName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadBalancerExists", reflect.TypeOf((*MockOvnClient)(nil).LoadBalancerExists), lbName)
}

// LoadBalancerUpdateVips mocks base method.
func (m *MockOvnClient) LoadBalancerUpdateVips(lbName string, vips map[string]string, op ovsdb.Mutator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadBalancerUpdateVips", lbName, vips, op)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadBalancerUpdateVips indicates an expected call of LoadBalancerUpdateVips.
func (mr *MockOvnClientMockRecorder) LoadBalancerUpdateVips(lbName, vips, op interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadBalancerUpdateVips", reflect.TypeOf((*MockOvnClient)(nil).LoadBalancerUpdateVips), lbName, vips, op)
}

// LogicalRouterExists mocks base method.
func (m *MockOvnClient) LogicalRouterExists(name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogicalRouterExists", name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogicalRouterExists indicates an expected call of LogicalRouterExists.
func (mr *MockOvnClientMockRecorder) LogicalRouterExists(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogicalRouterExists", reflect.TypeOf((*MockOvnClient)(nil).LogicalRouterExists), name)
}

// LogicalRouterPortExists mocks base method.
func (m *MockOvnClient) LogicalRouterPortExists(lrpName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogicalRouterPortExists", lrpName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogicalRouterPortExists indicates an expected call of LogicalRouterPortExists.
func (mr *MockOvnClientMockRecorder) LogicalRouterPortExists(lrpName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogicalRouterPortExists", reflect.TypeOf((*MockOvnClient)(nil).LogicalRouterPortExists), lrpName)
}

// LogicalSwitchExists mocks base method.
func (m *MockOvnClient) LogicalSwitchExists(lsName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogicalSwitchExists", lsName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogicalSwitchExists indicates an expected call of LogicalSwitchExists.
func (mr *MockOvnClientMockRecorder) LogicalSwitchExists(lsName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogicalSwitchExists", reflect.TypeOf((*MockOvnClient)(nil).LogicalSwitchExists), lsName)
}

// LogicalSwitchPortExists mocks base method.
func (m *MockOvnClient) LogicalSwitchPortExists(name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogicalSwitchPortExists", name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogicalSwitchPortExists indicates an expected call of LogicalSwitchPortExists.
func (mr *MockOvnClientMockRecorder) LogicalSwitchPortExists(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogicalSwitchPortExists", reflect.TypeOf((*MockOvnClient)(nil).LogicalSwitchPortExists), name)
}

// LogicalSwitchUpdateLoadBalancers mocks base method.
func (m *MockOvnClient) LogicalSwitchUpdateLoadBalancers(lsName string, op ovsdb.Mutator, lbNames ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{lsName, op}
	for _, a := range lbNames {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LogicalSwitchUpdateLoadBalancers", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogicalSwitchUpdateLoadBalancers indicates an expected call of LogicalSwitchUpdateLoadBalancers.
func (mr *MockOvnClientMockRecorder) LogicalSwitchUpdateLoadBalancers(lsName, op interface{}, lbNames ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{lsName, op}, lbNames...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogicalSwitchUpdateLoadBalancers", reflect.TypeOf((*MockOvnClient)(nil).LogicalSwitchUpdateLoadBalancers), varargs...)
}

// PortGroupAddPorts mocks base method.
func (m *MockOvnClient) PortGroupAddPorts(pgName string, lspNames ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{pgName}
	for _, a := range lspNames {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PortGroupAddPorts", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PortGroupAddPorts indicates an expected call of PortGroupAddPorts.
func (mr *MockOvnClientMockRecorder) PortGroupAddPorts(pgName interface{}, lspNames ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{pgName}, lspNames...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortGroupAddPorts", reflect.TypeOf((*MockOvnClient)(nil).PortGroupAddPorts), varargs...)
}

// PortGroupExists mocks base method.
func (m *MockOvnClient) PortGroupExists(pgName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PortGroupExists", pgName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PortGroupExists indicates an expected call of PortGroupExists.
func (mr *MockOvnClientMockRecorder) PortGroupExists(pgName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortGroupExists", reflect.TypeOf((*MockOvnClient)(nil).PortGroupExists), pgName)
}

// PortGroupRemovePorts mocks base method.
func (m *MockOvnClient) PortGroupRemovePorts(pgName string, lspNames ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{pgName}
	for _, a := range lspNames {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PortGroupRemovePorts", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PortGroupRemovePorts indicates an expected call of PortGroupRemovePorts.
func (mr *MockOvnClientMockRecorder) PortGroupRemovePorts(pgName interface{}, lspNames ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{pgName}, lspNames...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortGroupRemovePorts", reflect.TypeOf((*MockOvnClient)(nil).PortGroupRemovePorts), varargs...)
}

// PortGroupUpdatePorts mocks base method.
func (m *MockOvnClient) PortGroupUpdatePorts(pgName string, op ovsdb.Mutator, lspNames ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{pgName}
	for _, a := range lspNames {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PortGroupRemovePorts", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PortGroupRemovePorts indicates an expected call of PortGroupRemovePorts.
func (mr *MockOvnClientMockRecorder) PortGroupRemovePorts(pgName interface{}, lspNames ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{pgName}, lspNames...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortGroupRemovePorts", reflect.TypeOf((*MockOvnClient)(nil).PortGroupRemovePorts), varargs...)
}

// PortGroupResetPorts mocks base method.
func (m *MockOvnClient) PortGroupResetPorts(pgName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PortGroupResetPorts", pgName)
	ret0, _ := ret[0].(error)
	return ret0
}

// PortGroupResetPorts indicates an expected call of PortGroupResetPorts.
func (mr *MockOvnClientMockRecorder) PortGroupResetPorts(pgName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortGroupResetPorts", reflect.TypeOf((*MockOvnClient)(nil).PortGroupResetPorts), pgName)
}

// RemoveLogicalPatchPort mocks base method.
func (m *MockOvnClient) RemoveLogicalPatchPort(lspName, lrpName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLogicalPatchPort", lspName, lrpName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveLogicalPatchPort indicates an expected call of RemoveLogicalPatchPort.
func (mr *MockOvnClientMockRecorder) RemoveLogicalPatchPort(lspName, lrpName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLogicalPatchPort", reflect.TypeOf((*MockOvnClient)(nil).RemoveLogicalPatchPort), lspName, lrpName)
}

// SetAzName mocks base method.
func (m *MockOvnClient) SetAzName(azName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAzName", azName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAzName indicates an expected call of SetAzName.
func (mr *MockOvnClientMockRecorder) SetAzName(azName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAzName", reflect.TypeOf((*MockOvnClient)(nil).SetAzName), azName)
}

// SetICAutoRoute mocks base method.
func (m *MockOvnClient) SetICAutoRoute(enable bool, blackList []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetICAutoRoute", enable, blackList)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetICAutoRoute indicates an expected call of SetICAutoRoute.
func (mr *MockOvnClientMockRecorder) SetICAutoRoute(enable, blackList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetICAutoRoute", reflect.TypeOf((*MockOvnClient)(nil).SetICAutoRoute), enable, blackList)
}

// SetLBCIDR mocks base method.
func (m *MockOvnClient) SetLBCIDR(serviceCIDR string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLBCIDR", serviceCIDR)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLBCIDR indicates an expected call of SetLBCIDR.
func (mr *MockOvnClientMockRecorder) SetLBCIDR(serviceCIDR interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLBCIDR", reflect.TypeOf((*MockOvnClient)(nil).SetLBCIDR), serviceCIDR)
}

// SetLogicalSwitchPortExternalIds mocks base method.
func (m *MockOvnClient) SetLogicalSwitchPortExternalIds(lspName string, externalIds map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLogicalSwitchPortExternalIds", lspName, externalIds)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLogicalSwitchPortExternalIds indicates an expected call of SetLogicalSwitchPortExternalIds.
func (mr *MockOvnClientMockRecorder) SetLogicalSwitchPortExternalIds(lspName, externalIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogicalSwitchPortExternalIds", reflect.TypeOf((*MockOvnClient)(nil).SetLogicalSwitchPortExternalIds), lspName, externalIds)
}

// SetLogicalSwitchPortSecurity mocks base method.
func (m *MockOvnClient) SetLogicalSwitchPortSecurity(portSecurity bool, lspName, mac, ips, vips string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLogicalSwitchPortSecurity", portSecurity, lspName, mac, ips, vips)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLogicalSwitchPortSecurity indicates an expected call of SetLogicalSwitchPortSecurity.
func (mr *MockOvnClientMockRecorder) SetLogicalSwitchPortSecurity(portSecurity, lspName, mac, ips, vips interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogicalSwitchPortSecurity", reflect.TypeOf((*MockOvnClient)(nil).SetLogicalSwitchPortSecurity), portSecurity, lspName, mac, ips, vips)
}

// SetLogicalSwitchPortVirtualParents mocks base method.
func (m *MockOvnClient) SetLogicalSwitchPortVirtualParents(lsName, parents string, ips ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{lsName, parents}
	for _, a := range ips {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetLogicalSwitchPortVirtualParents", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLogicalSwitchPortVirtualParents indicates an expected call of SetLogicalSwitchPortVirtualParents.
func (mr *MockOvnClientMockRecorder) SetLogicalSwitchPortVirtualParents(lsName, parents interface{}, ips ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{lsName, parents}, ips...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogicalSwitchPortVirtualParents", reflect.TypeOf((*MockOvnClient)(nil).SetLogicalSwitchPortVirtualParents), varargs...)
}

// SetLogicalSwitchPortVlanTag mocks base method.
func (m *MockOvnClient) SetLogicalSwitchPortVlanTag(lspName string, vlanID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLogicalSwitchPortVlanTag", lspName, vlanID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLogicalSwitchPortVlanTag indicates an expected call of SetLogicalSwitchPortVlanTag.
func (mr *MockOvnClientMockRecorder) SetLogicalSwitchPortVlanTag(lspName, vlanID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogicalSwitchPortVlanTag", reflect.TypeOf((*MockOvnClient)(nil).SetLogicalSwitchPortVlanTag), lspName, vlanID)
}

// SetUseCtInvMatch mocks base method.
func (m *MockOvnClient) SetUseCtInvMatch() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUseCtInvMatch")
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUseCtInvMatch indicates an expected call of SetUseCtInvMatch.
func (mr *MockOvnClientMockRecorder) SetUseCtInvMatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUseCtInvMatch", reflect.TypeOf((*MockOvnClient)(nil).SetUseCtInvMatch))
}

// UpdateDnatAndSnat mocks base method.
func (m *MockOvnClient) UpdateDnatAndSnat(lrName, externalIP, logicalIP, lspName, externalMac, gatewayType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDnatAndSnat", lrName, externalIP, logicalIP, lspName, externalMac, gatewayType)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDnatAndSnat indicates an expected call of UpdateDnatAndSnat.
func (mr *MockOvnClientMockRecorder) UpdateDnatAndSnat(lrName, externalIP, logicalIP, lspName, externalMac, gatewayType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDnatAndSnat", reflect.TypeOf((*MockOvnClient)(nil).UpdateDnatAndSnat), lrName, externalIP, logicalIP, lspName, externalMac, gatewayType)
}

// UpdateNbGlobal mocks base method.
func (m *MockOvnClient) UpdateNbGlobal(nbGlobal *ovnnb.NBGlobal, fields ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{nbGlobal}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNbGlobal", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNbGlobal indicates an expected call of UpdateNbGlobal.
func (mr *MockOvnClientMockRecorder) UpdateNbGlobal(nbGlobal interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{nbGlobal}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNbGlobal", reflect.TypeOf((*MockOvnClient)(nil).UpdateNbGlobal), varargs...)
}

// UpdateSnat mocks base method.
func (m *MockOvnClient) UpdateSnat(lrName, externalIP, logicalIP string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSnat", lrName, externalIP, logicalIP)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSnat indicates an expected call of UpdateSnat.
func (mr *MockOvnClientMockRecorder) UpdateSnat(lrName, externalIP, logicalIP interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSnat", reflect.TypeOf((*MockOvnClient)(nil).UpdateSnat), lrName, externalIP, logicalIP)
}
